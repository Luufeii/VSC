搜索文件路径时，都是以终端打开的文件夹为当前目录，所以我们在运行python文件时，最好用终端打开到要运行的python文件所在的文件夹
以免因为文件目录而报错

1.(Optional) Finetune the pretrained model on the training dataset. This is useful for fine-grained dataset such as CUB since ImageNet is a general dataset:
python Finetune.py --data_dir ../wafer_data/imgs/train --train_class_list ../wafer_data/train_classes.txt --gpu_id 0

2.Extract the features of each image
python Feature_extractor.py --data_dir ../wafer_data/imgs/train --pretrain_model ../trained_models/FT_model_24.pkl --gpu_id 0
python Feature_extractor.py --data_dir ../wafer_data/imgs/test --pretrain_model ../trained_models/FT_model_24.pkl --gpu_id 0

3.Extract Visual Center
python VC_extractor.py --train_class_list ../wafer_data/train_classes.txt --test_class_list ../wafer_data/test_classes.txt --data_dir ../wafer_data/imgs/train --feature_name ResNet18_feature.json

4.Cluster in target feature space
python Cluster.py --test_class_list ../wafer_data/test_classes.txt --data_dir ../wafer_data/imgs/train --feature_name ResNet18_feature.json --cluster_method Kmeans --center_num 29

5.Train the model
python Train_Model.py --lamda 0.001 --data_path wafer_data/imgs/train --method VCL --GPU 0 --train_center json_file/ResNet18_VC.json --cluster_center json_file/Cluster_VC_ResNet.json --save_dir trained_models
python Train_Model.py --lamda 0.001 --data_path wafer_data/imgs/train --method CDVSc --GPU 0 --train_center json_file/ResNet18_VC.json --cluster_center json_file/Cluster_VC_ResNet.json --save_dir trained_models
python Train_Model.py --lamda 0.001 --data_path wafer_data/imgs/train --method BMVSc --GPU 0 --train_center json_file/ResNet18_VC.json --cluster_center json_file/Cluster_VC_ResNet.json --save_dir trained_models
python Train_Model.py --lamda 0.001 --data_path wafer_data/imgs/train --method WDVSc --GPU 0 --train_center json_file/ResNet18_VC.json --cluster_center json_file/Cluster_VC_ResNet.json --save_dir trained_models

6.Test the results
python Eval_Model.py --GPU 0 --checkpoint_fn trained_models/VCL
python Eval_Model.py --GPU 0 --checkpoint_fn trained_models/CDVSc
python Eval_Model.py --GPU 0 --checkpoint_fn trained_models/BMVSc
python Eval_Model.py --GPU 0 --checkpoint_fn trained_models/WDVSc